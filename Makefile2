# set V=1 (eg, "make V=1") to print the full commands etc.
ifneq ($V,1)
 Pecho=@echo
 P=@
else
 Pecho=@:
 P=
endif
DD = dd status=none bs=1k of=$@ seek=

COMMON_DIR = common
LIB = lib
TESTAPI = testapi

#CROSS = ../../crossgcc/armv5-eabi--glibc--stable/bin/armv5-glibc-linux-
CROSS = ../../crossgcc/gcc-arm-9.2-2019.12-x86_64-arm-none-eabi/bin/arm-none-eabi-
ifneq ($(CROSS),)
CC = $(CROSS)gcc
CXX = $(CROSS)g++
LD = $(CROSS)ld
CPP = $(CROSS)cpp
OBJCOPY = $(CROSS)objcopy
OBJDUMP = $(CROSS)objdump
READELF = $(CROSS)readelf
endif

BIN = bin
TARGET = rom
LD_FILE = rom.ld
LD_SRC = script/rom.ldi
LDFLAGS = -T $(LD_FILE)
#LDFLAGS_COM  = -L $(shell dirname `$(CC) -print-libgcc-file-name`) -lgcc
LDFLAGS_COM = -L $(shell dirname `$(CC) -print-libgcc-file-name`) -L $(shell dirname `$(CC) -print-file-name=libc.a`) -lstdc++ -lm -lc -lgcc

CFLAGS += -MMD -O1
CFLAGS += -nostdlib -fno-builtin
CFLAGS += -fno-pie -fno-PIE -fno-pic -fno-PIC
CFLAGS += -fno-partial-inlining -fno-jump-tables
CFLAGS += -static
CFLAGS += -nodefaultlibs
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -Wall -march=armv5te -Wno-unused-function -Wno-unused-variable
CFLAGS += -Iinclude -Iinclude/util -I$(TESTAPI)/qch -g

#-mthumb -mthumb-interwork

SPI_ALL := spi_all.bin
SPI_HEX := spi_all.hex

# Boot up
ASOURCES = start.S
CSOURCES = main.c

# common

CSOURCES += $(COMMON_DIR)/diag.c $(COMMON_DIR)/common.c $(COMMON_DIR)/sio.c $(COMMON_DIR)/cpu_util.c $(COMMON_DIR)/stc.c $(wildcard $(TESTAPI)/util/*.c)
CSOURCES += $(COMMON_DIR)/gpio_exp.c
CSOURCES += $(COMMON_DIR)/eabi_compat.c
#CSOURCES += $(COMMON_DIR)/uart_printf.c

# mon
CSOURCES += mon/monitor.c

# interrupt
CSOURCES += $(TESTAPI)/interrupt/sp_interrupt.c
ASOURCES += $(TESTAPI)/interrupt/vectors.S

# ardunio C source
CSOURCES += \
	Marlin2/framework-arduino/cores/arduino/wiring.c \
	Marlin2/framework-arduino/cores/arduino/wiring_analog.c \
	Marlin2/framework-arduino/cores/arduino/wiring_digital.c

# Marlin2
#CFLAGS += -fno-use-cxa-atexit -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -w
CFLAGS += -fno-exceptions -fmax-errors=5 -g -fmerge-all-constants -Os -Wall -ffunction-sections -fdata-sections
CFLAGS += -IMarlin2 -IMarlin2/framework-arduino/cores/arduino -IMarlin2/framework-arduino/variants/mega
CFLAGS += -DPLATFORMIO=50100 -DARDUINO_AVR_MEGA2560 -D__MARLIN_FIRMWARE__ -DF_CPU=16000000L -DARDUINO_ARCH_AVR -DARDUINO=10808 -DMOTHERBOARD=1020 -D__AVR__ -D__AVR_ATmega2560__

#CXXSOURCES += Marlin/motion_control.cpp Marlin/MarlinSerial.cpp Marlin/stepper.cpp Marlin/planner.cpp
#CXXSOURCES += Marlin/temperature_ads1015.cpp Marlin/temperature.cpp
#CXXSOURCES += Marlin/ConfigurationStore.cpp Marlin/Marlin_main.cpp Marlin/arduino/main.cpp
CXXSOURCES += \
	Marlin2/framework-arduino/cores/arduino/main.cpp \
	Marlin2/src/HAL/AVR/HAL.cpp \
	Marlin2/src/HAL/AVR/MarlinSerial.cpp \
	Marlin2/src/MarlinCore.cpp \
	Marlin2/src/core/serial.cpp \
	Marlin2/src/core/utility.cpp \
	Marlin2/src/feature/bedlevel/bedlevel.cpp \
	Marlin2/src/gcode/calibrate/G28.cpp \
	Marlin2/src/gcode/config/M200-M205.cpp \
	Marlin2/src/gcode/config/M220.cpp \
	Marlin2/src/gcode/config/M221.cpp \
	Marlin2/src/gcode/config/M301.cpp \
	Marlin2/src/gcode/config/M302.cpp \
	Marlin2/src/gcode/config/M92.cpp \
	Marlin2/src/gcode/control/M108_M112_M410.cpp \
	Marlin2/src/gcode/control/M111.cpp \
	Marlin2/src/gcode/control/M120_M121.cpp \
	Marlin2/src/gcode/control/M17_M18_M84.cpp \
	Marlin2/src/gcode/control/M211.cpp \
	Marlin2/src/gcode/control/M280.cpp \
	Marlin2/src/gcode/control/M350_M351.cpp \
	Marlin2/src/gcode/control/M400.cpp \
	Marlin2/src/gcode/control/M80_M81.cpp \
	Marlin2/src/gcode/control/M85.cpp \
	Marlin2/src/gcode/control/M993_M994.cpp \
	Marlin2/src/gcode/control/M997.cpp \
	Marlin2/src/gcode/control/M999.cpp \
	Marlin2/src/gcode/control/T.cpp \
	Marlin2/src/gcode/eeprom/M500-M504.cpp \
	Marlin2/src/gcode/feature/digipot/M907-M910.cpp \
	Marlin2/src/gcode/gcode.cpp \
	Marlin2/src/gcode/gcode_d.cpp \
	Marlin2/src/gcode/geometry/G92.cpp \
	Marlin2/src/gcode/geometry/M206_M428.cpp \
	Marlin2/src/gcode/host/M110.cpp \
	Marlin2/src/gcode/host/M113.cpp \
	Marlin2/src/gcode/host/M114.cpp \
	Marlin2/src/gcode/host/M115.cpp \
	Marlin2/src/gcode/host/M118.cpp \
	Marlin2/src/gcode/host/M119.cpp \
	Marlin2/src/gcode/lcd/M117.cpp \
	Marlin2/src/gcode/lcd/M145.cpp \
	Marlin2/src/gcode/lcd/M300.cpp \
	Marlin2/src/gcode/motion/G0_G1.cpp \
	Marlin2/src/gcode/motion/G2_G3.cpp \
	Marlin2/src/gcode/motion/G4.cpp \
	Marlin2/src/gcode/parser.cpp \
	Marlin2/src/gcode/queue.cpp \
	Marlin2/src/gcode/stats/M31.cpp \
	Marlin2/src/gcode/stats/M75-M78.cpp \
	Marlin2/src/gcode/temp/M104_M109.cpp \
	Marlin2/src/gcode/temp/M105.cpp \
	Marlin2/src/gcode/temp/M106_M107.cpp \
	Marlin2/src/gcode/temp/M140_M190.cpp \
	Marlin2/src/gcode/temp/M141_M191.cpp \
	Marlin2/src/gcode/temp/M155.cpp \
	Marlin2/src/gcode/temp/M303.cpp \
	Marlin2/src/gcode/units/M82_M83.cpp \
	Marlin2/src/lcd/extui/ui_api.cpp \
	Marlin2/src/lcd/fontutils.cpp \
	Marlin2/src/lcd/ultralcd.cpp \
	Marlin2/src/libs/buzzer.cpp \
	Marlin2/src/libs/crc16.cpp \
	Marlin2/src/libs/numtostr.cpp \
	Marlin2/src/libs/stopwatch.cpp \
	Marlin2/src/libs/vector_3.cpp \
	Marlin2/src/module/endstops.cpp \
	Marlin2/src/module/motion.cpp \
	Marlin2/src/module/planner.cpp \
	Marlin2/src/module/servo.cpp \
	Marlin2/src/module/settings.cpp \
	Marlin2/src/module/stepper.cpp \
	Marlin2/src/module/stepper/indirection.cpp \
	Marlin2/src/module/temperature.cpp \
	Marlin2/src/module/tool_change.cpp \
	Marlin2/src/sd/Sd2Card.cpp \
	Marlin2/src/sd/SdBaseFile.cpp \
	Marlin2/src/sd/SdFatUtil.cpp \
	Marlin2/src/sd/SdFile.cpp \
	Marlin2/src/sd/SdVolume.cpp \
	Marlin2/src/sd/cardreader.cpp \

#I2C_TEST = ENABLE
ifeq "$(I2C_TEST)" "ENABLE"
	CFLAGS += -DI2C_TEST
	# i2c test
	I2C_PATH = drivers/i2c
	CSOURCES += $(wildcard $(I2C_PATH)/*.c)
endif

# NOC_TEST = ENABLE
ifeq "$(NOC_TEST)" "ENABLE"
	CFLAGS += -DNOC_TEST
	# noc test
	TEST_NOC = $(TESTAPI)/noc
	CSOURCES += $(wildcard $(TEST_NOC)/*.c)
endif

#QCH_TEST = ENABLE
ifeq "$(QCH_TEST)" "ENABLE"
	TEST_QCH = $(TESTAPI)/qch
	CFLAGS += -DQCH_TEST
	CSOURCES += $(wildcard $(TEST_QCH)/*.c)
	ASOURCES += $(wildcard $(TEST_QCH)/*.S)
endif

#AXI_MON = ENABLE
ifeq "$(AXI_MON)" "ENABLE"
	CFLAGS += -DAXI_MON
	TEST_AXI_MON = $(TESTAPI)/axi_monitor
	CSOURCES += $(wildcard $(TEST_AXI_MON)/*.c)
endif

#SPI_NOR_TEST = ENABLE
ifeq "$(SPI_NOR_TEST)" "ENABLE"
        CFLAGS += -DSPI_NOR_TEST
        # spi nor test
        SPINOR_PATH = drivers/spinor
        CSOURCES += $(wildcard $(SPINOR_PATH)/*.c)
endif

#RS485_TEST = ENABLE
ifeq "$(RS485_TEST)" "ENABLE"
	CFLAGS += -DRS485_TEST
	# rs485 test
	RS485_PATH = drivers/rs485
	CSOURCES += $(wildcard $(RS485_PATH)/*.c)
endif

#CFLAGS += -DIPC_TEST

CXXFLAGS = $(CFLAGS) -Wno-register -fno-threadsafe-statics -fpermissive -std=gnu++11

OBJS = $(ASOURCES:.S=.o) $(CSOURCES:.c=.o) $(CXXSOURCES:.cpp=.o)
DEPS = $(OBJS:.o=.d)


.PHONY: clean all

all: $(BIN)/$(SPI_ALL)

$(BIN)/$(TARGET).bin: $(BIN)/$(TARGET)
	$P $(OBJCOPY) -O binary -S $< $@

$(BIN)/$(TARGET).dis: $(BIN)/$(TARGET)
	$P $(OBJDUMP) -d -S $< > $@

$(BIN)/$(TARGET): $(OBJS) $(LD_FILE)
	$(Pecho) "  LD   $@"
	$P $(LD) $(OBJS) -o $(BIN)/$(TARGET) -Map $(BIN)/$(TARGET).map $(LDFLAGS) $(LDFLAGS_COM)

$(LD_FILE): $(LD_SRC)
	$P $(CPP) -P $(CFLAGS) -x c $< -o $@

$(BIN)/$(SPI_ALL): $(BIN)/$(TARGET).bin Makefile
	$(Pecho) "  PACK $@"
	$P bash ./script/add_uhdr.sh uboot_B $< $(BIN)/$(TARGET).img 0x200040 0x200040
	$P $(DD)64  if=prebuilt/xboot_nor.img
	$P $(DD)256 if=$(BIN)/$(TARGET).img
	$P ls -l $@

#testapi/qch/iop.o: testapi/qch/DQ8051.bin
%.o: %.S
	$(Pecho) "  CC   $<"
	$P $(CC) $(CFLAGS) -c -o $@ $<

%.o: %.c
	$(Pecho) "  CC   $<"
	$P $(CC) $(CFLAGS) -c -o $@ $<

%.o: %.cpp
	$(Pecho) "  CC   $<"
	$P $(CC) $(CXXFLAGS) -c -o $@ $<

zmem: $(BIN)/zmem.hex
$(BIN)/zmem.hex: $(TARGET)
# 	args: input_elf output_hex tool_chain_location
	$P python ./script/tools/elf2mem.py $(BIN)/$< $@ $(READELF)
	$(Pecho) "Gen $@ finished."
	$P ${MAKE} up

up:
	$(Pecho) "Upload to vnc3"
	$P ~/util/ftp_upload.sh vnc3 $(BIN)/zmem.hex /home/nzlu/ftp
	$(Pecho) "Upload done"


clean:
	$P -rm -f $(OBJS) $(DEPS) rom.d >/dev/null
	$P -cd $(BIN); rm -f $(TARGET) $(TARGET).bin $(SPI_ALL) $(TARGET).map $(TARGET).dis $(TARGET).img >/dev/null
	$P -rm -f $(LD_FILE) >/dev/null


p-%:
	$(Pecho) "$* is '$($*)'"

# Automaticaly include the dependency files created by gcc
-include $(DEPS)
